{"version":3,"sources":["../lib/config.js"],"names":["nconf","env","defaults","appName","appVersion","defaultLocale","isProduction","process","NODE_ENV","isLogEnabled","LOGGING","locales","port","PORT","get"],"mappings":";;;;;;;AACA;;;;AADA;AAEA;AAEA;AACA;AACAA,eAAMC,GAAN,CAAU,IAAV,E,CAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;;;AACAD,eAAME,QAAN,CAAe;AACbC,EAAAA,OAAO,EAAE,kBADI;AAEbC,EAAAA,UAAU,EAAE,CAFC;AAGbC,EAAAA,aAAa,EAAE,IAHF;AAIbC,EAAAA,YAAY,EAAEC,OAAO,CAACN,GAAR,CAAYO,QAAZ,KAAyB,YAJ1B;AAKbC,EAAAA,YAAY,EAAEF,OAAO,CAACN,GAAR,CAAYS,OAAZ,KAAwB,IALzB;AAMbC,EAAAA,OAAO,EAAE,CAAC,IAAD,EAAO,IAAP,CANI;AAObC,EAAAA,IAAI,EAAEL,OAAO,CAACN,GAAR,CAAYY,IAAZ,IAAoB;AAPb,CAAf;;eAUeb,eAAMc,GAAN,E","sourcesContent":["// http://www.codedependant.net/2015/01/31/production-ready-node-configuration\r\nimport nconf from 'nconf';\r\n// import { execSync } from 'child_process';\r\n\r\n// Specifying an env delimiter allows us to override config when shipping to\r\n// production server. 'foo__bar=2 gulp' will set config to '{foo: {bar: 2}}'\r\nnconf.env('__');\r\n\r\n// For local development with secrets. Check src/common/_secrets.json file.\r\n// nconf.file('src/common/secrets.json');\r\n\r\n// // The semver is for libraries, apps are versioned by git commit SHA.\r\n// const sourceVersion = process.env.SOURCE_VERSION || execSync('git rev-parse HEAD')\r\n//   .toString()\r\n//   .trim();\r\n\r\n// Remember, never put secrets in default config.\r\n// Use environment variables for production, and secrets.json for development.\r\nnconf.defaults({\r\n  appName: 'node mock server',\r\n  appVersion: 1,\r\n  defaultLocale: 'en',\r\n  isProduction: process.env.NODE_ENV === 'production',\r\n  isLogEnabled: process.env.LOGGING === 'ON',\r\n  locales: ['cs', 'en'],\r\n  port: process.env.PORT || 8080,\r\n});\r\n\r\nexport default nconf.get();\r\n"],"file":"config.js"}
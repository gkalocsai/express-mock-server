{"version":3,"sources":["../../lib/core/sources-router.js"],"names":["SourcesRouter","constructor","parser","registerSources","app","isLogEnabled","map","getMap","Object","keys","forEach","path","registerGET","registerPOST","registerPUT","registerDELETE","registerPATCH","pathItem","gets","methods","GET","get","req","res","next","logRegisteredPath","posts","POST","post","puts","PUT","put","deletes","DELETE","delete","patches","PATCH","patch","method","console","log","magenta"],"mappings":";;;;;;;AAAA;;AACA;;AAEO,MAAMA,aAAN,CAAoB;AACzB;AACF;AACA;AACEC,EAAAA,WAAW,CAACC,MAAD,EAAS;AAClB,SAAKA,MAAL,GAAcA,MAAd;AACD;;AAEDC,EAAAA,eAAe,CAACC,GAAD,EAAMC,YAAN,EAAoB;AACjC,UAAMC,GAAG,GAAG,KAAKJ,MAAL,CAAYK,MAAZ,EAAZ;AACAC,IAAAA,MAAM,CAACC,IAAP,CAAYH,GAAZ,EAAiBI,OAAjB,CAA0BC,IAAD,IAAU;AACjC,WAAKC,WAAL,CAAiBR,GAAjB,EAAsBO,IAAtB,EAA4BN,YAA5B;AACA,WAAKQ,YAAL,CAAkBT,GAAlB,EAAuBO,IAAvB,EAA6BN,YAA7B;AACA,WAAKS,WAAL,CAAiBV,GAAjB,EAAsBO,IAAtB,EAA4BN,YAA5B;AACA,WAAKU,cAAL,CAAoBX,GAApB,EAAyBO,IAAzB,EAA+BN,YAA/B;AACA,WAAKW,aAAL,CAAmBZ,GAAnB,EAAwBO,IAAxB,EAA8BN,YAA9B;AACD,KAND;AAOD;;AAEDO,EAAAA,WAAW,CAACR,GAAD,EAAMO,IAAN,EAAYL,GAAZ,EAAiBD,YAAjB,EAA+B;AACxC,UAAMY,QAAQ,GAAG,KAAKf,MAAL,CAAYK,MAAZ,GAAqBI,IAArB,CAAjB;AACA,UAAMO,IAAI,GAAGD,QAAQ,CAACE,mBAAQC,GAAT,CAArB;;AAEA,QAAIF,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACR,OAAL,CAAa,MAAM;AACjBN,QAAAA,GAAG,CAACiB,GAAJ,CAAQV,IAAR,EAAc,CAACW,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAChC,8CAAe,KAAKtB,MAApB,EAA4BoB,GAA5B,EAAiCC,GAAjC,EAAsCC,IAAtC;AACD,SAFD;AAGA,aAAKC,iBAAL,CAAuBpB,YAAvB,EAAqCc,mBAAQC,GAA7C,EAAkDT,IAAlD;AACD,OALD;AAMD;AACF;;AAEDE,EAAAA,YAAY,CAACT,GAAD,EAAMO,IAAN,EAAYL,GAAZ,EAAiBD,YAAjB,EAA+B;AACzC,UAAMY,QAAQ,GAAG,KAAKf,MAAL,CAAYK,MAAZ,GAAqBI,IAArB,CAAjB;AACA,UAAMe,KAAK,GAAGT,QAAQ,CAACE,mBAAQQ,IAAT,CAAtB;;AACA,QAAID,KAAJ,EAAW;AACTA,MAAAA,KAAK,CAAChB,OAAN,CAAc,MAAM;AAClBN,QAAAA,GAAG,CAACwB,IAAJ,CAASjB,IAAT,EAAe,CAACW,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACjC,8CAAe,KAAKtB,MAApB,EAA4BoB,GAA5B,EAAiCC,GAAjC,EAAsCC,IAAtC;AACD,SAFD;AAGA,aAAKC,iBAAL,CAAuBpB,YAAvB,EAAqCc,mBAAQQ,IAA7C,EAAmDhB,IAAnD;AACD,OALD;AAMD;AACF;;AAEDG,EAAAA,WAAW,CAACV,GAAD,EAAMO,IAAN,EAAYL,GAAZ,EAAiBD,YAAjB,EAA+B;AACxC,UAAMY,QAAQ,GAAG,KAAKf,MAAL,CAAYK,MAAZ,GAAqBI,IAArB,CAAjB;AACA,UAAMkB,IAAI,GAAGZ,QAAQ,CAACE,mBAAQW,GAAT,CAArB;;AACA,QAAID,IAAJ,EAAU;AACRA,MAAAA,IAAI,CAACnB,OAAL,CAAa,MAAM;AACjBN,QAAAA,GAAG,CAAC2B,GAAJ,CAAQpB,IAAR,EAAc,CAACW,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAChC,8CAAe,KAAKtB,MAApB,EAA4BoB,GAA5B,EAAiCC,GAAjC,EAAsCC,IAAtC;AACD,SAFD;AAGA,aAAKC,iBAAL,CAAuBpB,YAAvB,EAAqCc,mBAAQW,GAA7C,EAAkDnB,IAAlD;AACD,OALD;AAMD;AACF;;AAEDI,EAAAA,cAAc,CAACX,GAAD,EAAMO,IAAN,EAAYL,GAAZ,EAAiBD,YAAjB,EAA+B;AAC3C,UAAMY,QAAQ,GAAG,KAAKf,MAAL,CAAYK,MAAZ,GAAqBI,IAArB,CAAjB;AACA,UAAMqB,OAAO,GAAGf,QAAQ,CAACE,mBAAQc,MAAT,CAAxB;;AACA,QAAID,OAAJ,EAAa;AACXA,MAAAA,OAAO,CAACtB,OAAR,CAAgB,MAAM;AACpBN,QAAAA,GAAG,CAAC8B,MAAJ,CAAWvB,IAAX,EAAiB,CAACW,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AACnC,8CAAe,KAAKtB,MAApB,EAA4BoB,GAA5B,EAAiCC,GAAjC,EAAsCC,IAAtC;AACD,SAFD;AAGA,aAAKC,iBAAL,CAAuBpB,YAAvB,EAAqCc,mBAAQc,MAA7C,EAAqDtB,IAArD;AACD,OALD;AAMD;AACF;;AAEDK,EAAAA,aAAa,CAACZ,GAAD,EAAMO,IAAN,EAAYL,GAAZ,EAAiBD,YAAjB,EAA+B;AAC1C,UAAMY,QAAQ,GAAG,KAAKf,MAAL,CAAYK,MAAZ,GAAqBI,IAArB,CAAjB;AACA,UAAMwB,OAAO,GAAGlB,QAAQ,CAACE,mBAAQiB,KAAT,CAAxB;;AACA,QAAID,OAAJ,EAAa;AACXA,MAAAA,OAAO,CAACzB,OAAR,CAAgB,MAAM;AACpBN,QAAAA,GAAG,CAACiC,KAAJ,CAAU1B,IAAV,EAAgB,CAACW,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAClC,8CAAe,KAAKtB,MAApB,EAA4BoB,GAA5B,EAAiCC,GAAjC,EAAsCC,IAAtC;AACD,SAFD;AAGA,aAAKC,iBAAL,CAAuBpB,YAAvB,EAAqCc,mBAAQiB,KAA7C,EAAoDzB,IAApD;AACD,OALD;AAMD;AACF;AAED;AACF;AACA;;;AACEc,EAAAA,iBAAiB,CAACpB,YAAD,EAAeiC,MAAf,EAAuB3B,IAAvB,EAA6B;AAC5C,QAAIN,YAAJ,EAAkB;AAChBkC,MAAAA,OAAO,CAACC,GAAR,CAAa,OAAMF,MAAO,IAAG3B,IAAK,EAAtB,CAAwB8B,OAApC;AACD;AACF;;AA5FwB","sourcesContent":["import { methods } from '../constants';\r\nimport { requestHandler } from './request-handler';\r\n\r\nexport class SourcesRouter {\r\n  /**\r\n   * @param {SourcesParser} parser\r\n   */\r\n  constructor(parser) {\r\n    this.parser = parser;\r\n  }\r\n\r\n  registerSources(app, isLogEnabled) {\r\n    const map = this.parser.getMap();\r\n    Object.keys(map).forEach((path) => {\r\n      this.registerGET(app, path, isLogEnabled);\r\n      this.registerPOST(app, path, isLogEnabled);\r\n      this.registerPUT(app, path, isLogEnabled);\r\n      this.registerDELETE(app, path, isLogEnabled);\r\n      this.registerPATCH(app, path, isLogEnabled);\r\n    });\r\n  }\r\n\r\n  registerGET(app, path, map, isLogEnabled) {\r\n    const pathItem = this.parser.getMap()[path];\r\n    const gets = pathItem[methods.GET];\r\n\r\n    if (gets) {\r\n      gets.forEach(() => {\r\n        app.get(path, (req, res, next) => {\r\n          requestHandler(this.parser, req, res, next);\r\n        });\r\n        this.logRegisteredPath(isLogEnabled, methods.GET, path);\r\n      });\r\n    }\r\n  }\r\n\r\n  registerPOST(app, path, map, isLogEnabled) {\r\n    const pathItem = this.parser.getMap()[path];\r\n    const posts = pathItem[methods.POST];\r\n    if (posts) {\r\n      posts.forEach(() => {\r\n        app.post(path, (req, res, next) => {\r\n          requestHandler(this.parser, req, res, next);\r\n        });\r\n        this.logRegisteredPath(isLogEnabled, methods.POST, path);\r\n      });\r\n    }\r\n  }\r\n\r\n  registerPUT(app, path, map, isLogEnabled) {\r\n    const pathItem = this.parser.getMap()[path];\r\n    const puts = pathItem[methods.PUT];\r\n    if (puts) {\r\n      puts.forEach(() => {\r\n        app.put(path, (req, res, next) => {\r\n          requestHandler(this.parser, req, res, next);\r\n        });\r\n        this.logRegisteredPath(isLogEnabled, methods.PUT, path);\r\n      });\r\n    }\r\n  }\r\n\r\n  registerDELETE(app, path, map, isLogEnabled) {\r\n    const pathItem = this.parser.getMap()[path];\r\n    const deletes = pathItem[methods.DELETE];\r\n    if (deletes) {\r\n      deletes.forEach(() => {\r\n        app.delete(path, (req, res, next) => {\r\n          requestHandler(this.parser, req, res, next);\r\n        });\r\n        this.logRegisteredPath(isLogEnabled, methods.DELETE, path);\r\n      });\r\n    }\r\n  }\r\n\r\n  registerPATCH(app, path, map, isLogEnabled) {\r\n    const pathItem = this.parser.getMap()[path];\r\n    const patches = pathItem[methods.PATCH];\r\n    if (patches) {\r\n      patches.forEach(() => {\r\n        app.patch(path, (req, res, next) => {\r\n          requestHandler(this.parser, req, res, next);\r\n        });\r\n        this.logRegisteredPath(isLogEnabled, methods.PATCH, path);\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Method to log registered path\r\n   */\r\n  logRegisteredPath(isLogEnabled, method, path) {\r\n    if (isLogEnabled) {\r\n      console.log(`REG ${method} ${path}`.magenta);\r\n    }\r\n  }\r\n}\r\n"],"file":"sources-router.js"}
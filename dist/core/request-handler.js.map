{"version":3,"sources":["../../lib/core/request-handler.js"],"names":["APPLICATION_JSON","sendResponse","response","res","next","file","type","path","status","StatusCodes","INTERNAL_SERVER_ERROR","send","end","statusCode","sendFile","dotfiles","headers","Date","now","err","console","log","body","requestHandler","sourcesParser","req","method","route","definitions","getMap","matchedRecord","length","methods","POST","GET","PUT","DELETE","PATCH","bgRed","white","bgBlue","yellow","query","NOT_FOUND","params","forEach","headerItem","setHeader","contentType","delay","setTimeout"],"mappings":"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","sourcesContent":["import { StatusCodes } from 'http-status-codes';\r\nimport { methods } from '../constants';\r\nimport { isFunction } from './utils';\r\nimport { matchRecordPost } from './matchers/http-post-matcher';\r\nimport { matchRecordGet } from './matchers/http-get-matcher';\r\n\r\nconst APPLICATION_JSON = 'application/json';\r\n\r\nconst sendResponse = (response, res, next) => {\r\n  if (response.file) {\r\n    const { type, path } = response.file;\r\n\r\n    if (!type) {\r\n      res\r\n        .status(StatusCodes.INTERNAL_SERVER_ERROR)\r\n        .send('File type has to be specified!')\r\n        .end();\r\n      return;\r\n    }\r\n\r\n    if (!path) {\r\n      res\r\n        .status(StatusCodes.INTERNAL_SERVER_ERROR)\r\n        .send('File path has to be specified!')\r\n        .end();\r\n      return;\r\n    }\r\n\r\n    res.status(response.statusCode).type(type);\r\n    res.sendFile(\r\n      path,\r\n      {\r\n        dotfiles: 'deny',\r\n        headers: {\r\n          'x-timestamp': Date.now(),\r\n          'x-sent': true,\r\n        },\r\n      },\r\n      function (err) {\r\n        if (err) {\r\n          next(err);\r\n        } else {\r\n          console.log('Sent:', path);\r\n        }\r\n      }\r\n    );\r\n  } else {\r\n    res.send(response.body);\r\n  }\r\n};\r\n\r\nexport const requestHandler = (sourcesParser, req, res, next) => {\r\n  let method = req.method;\r\n  let path = req.route.path;\r\n  let definitions = sourcesParser.getMap()[path][method];\r\n\r\n  // console.log(method);\r\n  // console.log(req.body);\r\n\r\n  let response = null;\r\n  let matchedRecord = null;\r\n\r\n  if (definitions.length === 1) {\r\n    matchedRecord = definitions[0];\r\n    response = matchedRecord.response;\r\n  } else {\r\n    switch (method) {\r\n      case methods.POST: {\r\n        matchedRecord = matchRecordPost(req, definitions);\r\n        break;\r\n      }\r\n\r\n      case methods.GET:\r\n      case methods.PUT:\r\n      case methods.DELETE:\r\n      case methods.PATCH:\r\n      default: {\r\n        matchedRecord = matchRecordGet(req, definitions);\r\n      }\r\n    }\r\n\r\n    if (matchedRecord !== null) {\r\n      response = matchedRecord.response;\r\n    }\r\n\r\n    if (response === null) {\r\n      console.log('ERR no reaponse but why?'.bgRed.white);\r\n      console.log('I know this URL but no match for parameters.'.bgBlue.white);\r\n      console.log(`method ${method}    path ${path}`);\r\n      console.log('QUERY'.yellow);\r\n      console.log(req.query);\r\n      console.log('BODY'.yellow);\r\n      console.log(req.body);\r\n      console.log('bundle'.yellow);\r\n      // myLog(bundle);\r\n      res\r\n        .status(StatusCodes.NOT_FOUND)\r\n        .send('NOT FOUND - no reaponse but why? Look to console.')\r\n        .end();\r\n      return;\r\n    }\r\n  }\r\n\r\n  if (isFunction(response)) {\r\n    response = response(req.params, req.query, req.body, req.headers);\r\n  }\r\n\r\n  if (!!response.headers) {\r\n    response.headers.forEach((headerItem) => {\r\n      res.setHeader(headerItem['name'], headerItem['values'][0]);\r\n    });\r\n  }\r\n\r\n  res.status(response.statusCode).type(response.contentType || APPLICATION_JSON);\r\n\r\n  if (response.delay) {\r\n    setTimeout(() => {\r\n      sendResponse(response, res, next);\r\n    }, response.delay);\r\n  } else {\r\n    sendResponse(response, res, next);\r\n  }\r\n};\r\n"],"file":"request-handler.js"}
{"version":3,"sources":["../../lib/core/sources-parser.js"],"names":["isLogEnabled","config","Record","constructor","record","__record","queryStringParameters","request","body","response","SourcesParser","sources","generateMapFromSources","getMap","map","resetMap","GENERATE_TITLE","console","time","forEach","source","setSource","sortMap","timeEnd","setRecord","switchRecord","SET_NEW_REC","method","path","isChanged","changedRecord","index","isQueryStringEqual","JSON","stringify","push","Object","keys","pathItem","gets","methods","GET","sort","compare","posts","POST","puts","PUT","deletes","DELETE","patches","PATCH","qs1","qs2","length","isEqual","qs1ref","qs2ref","item","name","values","qs2Values","value","indexOf","a","b","aSpecificCount","bSpecificCount","qs","REG_ALL"],"mappings":"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","sourcesContent":["import { methods, REG_ALL } from './../constants';\r\nimport config from './../config';\r\n\r\nconst { isLogEnabled } = config;\r\n\r\nclass Record {\r\n  constructor(record) {\r\n    this.__record = record;\r\n    this.queryStringParameters = record.request.queryStringParameters;\r\n    this.body = record.request.body;\r\n    this.response = record.response;\r\n  }\r\n}\r\n\r\n/**\r\n *  Class for handling sources\r\n */\r\nexport class SourcesParser {\r\n  constructor(sources) {\r\n    this.sources = sources;\r\n    this.generateMapFromSources(sources);\r\n  }\r\n\r\n  /**\r\n   *  @public\r\n   *  @return {!Object}\r\n   */\r\n  getMap() {\r\n    return this.map;\r\n  }\r\n\r\n  /**\r\n   *  @public\r\n   */\r\n  resetMap() {\r\n    this.generateMapFromSources(this.sources);\r\n  }\r\n\r\n  /**\r\n   *  Method to initialize sources to map\r\n   *  @param {Object} sources\r\n   */\r\n  generateMapFromSources(sources) {\r\n    const GENERATE_TITLE = 'Generate original map from sources';\r\n    if (isLogEnabled) {\r\n      console.time(GENERATE_TITLE);\r\n    }\r\n\r\n    this.map = {};\r\n    sources.forEach((source) => {\r\n      this.setSource(this.map, source);\r\n    });\r\n    this.sortMap();\r\n\r\n    if (isLogEnabled) {\r\n      console.timeEnd(GENERATE_TITLE);\r\n    }\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  setSource(map, source) {\r\n    source.forEach((record) => {\r\n      this.setRecord(map, record);\r\n    });\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  switchRecord(record) {\r\n    const SET_NEW_REC = 'Set new record';\r\n    if (isLogEnabled) console.time(SET_NEW_REC);\r\n    let { method, path, queryStringParameters, body } = record.request;\r\n    let isChanged = false;\r\n    this.map[path][method].forEach((changedRecord, index) => {\r\n      // console.log('**************'.blue);\r\n      // console.log(JSON.stringify(body));\r\n      // console.log(JSON.stringify(changedRecord.body));\r\n      // console.log(JSON.stringify(body) == JSON.stringify(changedRecord.body));\r\n      if (\r\n        isQueryStringEqual(\r\n          queryStringParameters,\r\n          changedRecord.queryStringParameters\r\n        ) &&\r\n        JSON.stringify(body) === JSON.stringify(changedRecord.body)\r\n      ) {\r\n        // console.log('CHANGE FROM '.green);\r\n        // console.log(JSON.stringify(this.map[path][method][index], null, \"  \"));\r\n        this.map[path][method][index] = new Record(record);\r\n        // console.log('CHANGE TO '.blue);\r\n        // console.log(JSON.stringify(this.map[path][method][index], null, \"  \"));\r\n        isChanged = true;\r\n      }\r\n    });\r\n    if (!isChanged) {\r\n      this.setRecord(this.map, record);\r\n    }\r\n    this.sortMap();\r\n    if (isLogEnabled) console.timeEnd(SET_NEW_REC);\r\n  }\r\n\r\n  /**\r\n   *\r\n   */\r\n  setRecord(map, record) {\r\n    let { method, path } = record.request;\r\n    if (!map[path]) map[path] = {};\r\n    if (!map[path][method]) map[path][method] = [];\r\n    map[path][method].push(new Record(record));\r\n  }\r\n\r\n  /**\r\n   *  Method to sort map\r\n   */\r\n  sortMap() {\r\n    Object.keys(this.map).forEach((path) => {\r\n      let pathItem = this.map[path];\r\n      let gets = pathItem[methods.GET];\r\n      if (gets) {\r\n        gets.sort(compare);\r\n      }\r\n      let posts = pathItem[methods.POST];\r\n      if (posts) {\r\n        posts.sort(compare);\r\n      }\r\n      let puts = pathItem[methods.PUT];\r\n      if (puts) {\r\n        puts.sort(compare);\r\n      }\r\n      let deletes = pathItem[methods.DELETE];\r\n      if (deletes) {\r\n        deletes.sort(compare);\r\n      }\r\n      let patches = pathItem[methods.PATCH];\r\n      if (patches) {\r\n        patches.sort(compare);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * TODO: refactoring\r\n */\r\nfunction isQueryStringEqual(qs1, qs2) {\r\n  if ((qs1 && !qs2) || (!qs1 && qs2)) return false;\r\n  if (!qs1 && !qs2) return true;\r\n  if (qs1.length !== qs2.length) return false;\r\n  let isEqual = true;\r\n  let qs1ref = {};\r\n  let qs2ref = {};\r\n\r\n  qs1.forEach((item) => {\r\n    qs1ref[item['name']] = item['values'];\r\n  });\r\n\r\n  qs2.forEach((item) => {\r\n    qs2ref[item['name']] = item['values'];\r\n  });\r\n\r\n  Object.keys(qs1ref).forEach((name) => {\r\n    let values = qs1ref[name];\r\n    let qs2Values = qs2ref[name];\r\n    if (qs2Values.length != values.length) {\r\n      isEqual = false;\r\n    } else {\r\n      values.forEach((value) => {\r\n        if (qs2Values.indexOf(value) === -1) {\r\n          isEqual = false;\r\n        }\r\n      });\r\n    }\r\n  });\r\n  return isEqual;\r\n}\r\n\r\n/**\r\n *  Method to compare two requests for sorting by params count\r\n */\r\nfunction compare(a, b) {\r\n  if (!a.queryStringParameters && !b.queryStringParameters) return 0;\r\n  if (!a.queryStringParameters) return 1;\r\n  if (!b.queryStringParameters) return -1;\r\n  if (b.queryStringParameters.length != a.queryStringParameters.length)\r\n    return b.queryStringParameters.length - a.queryStringParameters.length;\r\n\r\n  // toto posledni pravidlo je kvuli obecnemu parametru, aby prevazili konkretni nad obecnym.   2 > .*\r\n  let aSpecificCount = 0;\r\n  let bSpecificCount = 0;\r\n  a.queryStringParameters.forEach((qs, index) => {\r\n    if (qs['values'].indexOf(REG_ALL) !== -1) aSpecificCount++;\r\n  });\r\n  b.queryStringParameters.forEach((qs) => {\r\n    if (qs['values'].indexOf(REG_ALL) !== -1) bSpecificCount++;\r\n  });\r\n  return aSpecificCount - bSpecificCount;\r\n}\r\n"],"file":"sources-parser.js"}
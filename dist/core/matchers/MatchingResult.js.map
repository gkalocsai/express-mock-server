{"version":3,"sources":["../../../lib/core/matchers/MatchingResult.js"],"names":["MATCH_TYPE","STRICT","SUBSET","DEFAULT","NO","MatchingResult","constructor","type","countOfMatches","countOfMatchesUnspecific","count","countUnspecific","isDefault","isStrict","isNo","isSubset","compare","other","print","toPrint","console","log","bgBlue","white","MATCH_NO","MATCH_STRICT","MATCH_DEFAULT"],"mappings":";;;;;;AAAO,MAAMA,UAAU,GAAG;AACxBC,EAAAA,MAAM,EAAE,QADgB;AAExBC,EAAAA,MAAM,EAAE,QAFgB;AAEN;AAClBC,EAAAA,OAAO,EAAE,SAHe;AAGJ;AACpBC,EAAAA,EAAE,EAAE;AAJoB,CAAnB;AAOP;AACA;AACA;;;;AACA,MAAMC,cAAN,CAAqB;AACnBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,cAAc,GAAG,IAAxB,EAA8BC,wBAAwB,GAAG,IAAzD,EAA+D;AACxE,SAAKF,IAAL,GAAYA,IAAZ;AACA,SAAKG,KAAL,GAAaF,cAAb;AACA,SAAKG,eAAL,GAAuBF,wBAAvB;AACD;;AAEDG,EAAAA,SAAS,GAAG;AACV,WAAO,KAAKL,IAAL,KAAcP,UAAU,CAACG,OAAhC;AACD;;AACDU,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKN,IAAL,KAAcP,UAAU,CAACC,MAAhC;AACD;;AACDa,EAAAA,IAAI,GAAG;AACL,WAAO,KAAKP,IAAL,KAAcP,UAAU,CAACI,EAAhC;AACD;;AACDW,EAAAA,QAAQ,GAAG;AACT,WAAO,KAAKR,IAAL,KAAcP,UAAU,CAACE,MAAhC;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACEc,EAAAA,OAAO,CAACC,KAAD,EAAQ;AACb,QAAIA,KAAK,CAACV,IAAN,KAAe,KAAKA,IAAxB,EAA8B;AAC5B,UAAI,KAAKQ,QAAL,EAAJ,EAAqB;AACnB,YAAI,KAAKL,KAAL,KAAeO,KAAK,CAACP,KAAzB,EAAgC;AAC9B,iBAAO,KAAKC,eAAL,GAAuBM,KAAK,CAACN,eAApC;AACD,SAFD,MAEO;AACL,iBAAO,KAAKD,KAAL,GAAaO,KAAK,CAACP,KAA1B;AACD;AACF,OAND,MAMO;AACL,eAAO,CAAP;AACD;AACF,KAVD,MAUO;AACL,UAAI,KAAKG,QAAL,EAAJ,EAAqB,OAAO,CAAP;AACrB,UAAII,KAAK,CAACJ,QAAN,EAAJ,EAAsB,OAAO,CAAC,CAAR;AACtB,UAAI,KAAKC,IAAL,EAAJ,EAAiB,OAAO,CAAC,CAAR;AACjB,UAAIG,KAAK,CAACH,IAAN,EAAJ,EAAkB,OAAO,CAAP;AAClB,UAAI,KAAKC,QAAL,MAAmBE,KAAK,CAACL,SAAN,EAAvB,EAA0C,OAAO,CAAP;AAC1C,UAAI,KAAKA,SAAL,MAAoBK,KAAK,CAACF,QAAN,EAAxB,EAA0C,OAAO,CAAC,CAAR;AAC3C;AACF;AAED;AACF;AACA;;;AACEG,EAAAA,KAAK,GAAG;AACN,QAAIC,OAAO,GAAG,0BAA0B,KAAKZ,IAA7C;;AACA,QAAI,KAAKG,KAAL,KAAe,IAAnB,EAAyB;AACvBS,MAAAA,OAAO,IAAI,eAAe,KAAKT,KAA/B;AACD;;AACD,QAAI,KAAKC,eAAL,KAAyB,IAA7B,EAAmC;AACjCQ,MAAAA,OAAO,IAAI,wBAAwB,KAAKR,eAAxC;AACD;;AACDS,IAAAA,OAAO,CAACC,GAAR,CAAYF,OAAO,CAACG,MAAR,CAAeC,KAA3B;AACD;;AA9DkB;;AAiEd,MAAMC,QAAQ,GAAG,IAAInB,cAAJ,CAAmBL,UAAU,CAACI,EAA9B,CAAjB;;AACA,MAAMqB,YAAY,GAAG,IAAIpB,cAAJ,CAAmBL,UAAU,CAACC,MAA9B,CAArB;;AACA,MAAMyB,aAAa,GAAG,IAAIrB,cAAJ,CAAmBL,UAAU,CAACG,OAA9B,CAAtB;;eAEQE,c","sourcesContent":["export const MATCH_TYPE = {\r\n  STRICT: 'strict',\r\n  SUBSET: 'subset', //  some QS match\r\n  DEFAULT: 'default', //  request have QS but bundle doesnt\r\n  NO: 'no',\r\n};\r\n\r\n/**\r\n *\r\n */\r\nclass MatchingResult {\r\n  constructor(type, countOfMatches = null, countOfMatchesUnspecific = null) {\r\n    this.type = type;\r\n    this.count = countOfMatches;\r\n    this.countUnspecific = countOfMatchesUnspecific;\r\n  }\r\n\r\n  isDefault() {\r\n    return this.type === MATCH_TYPE.DEFAULT;\r\n  }\r\n  isStrict() {\r\n    return this.type === MATCH_TYPE.STRICT;\r\n  }\r\n  isNo() {\r\n    return this.type === MATCH_TYPE.NO;\r\n  }\r\n  isSubset() {\r\n    return this.type === MATCH_TYPE.SUBSET;\r\n  }\r\n\r\n  /**\r\n   *            STRICT SUBSET DEFAULT NO\r\n   *  STRICT      0      1      1      1\r\n   *  SUBSET      -1     c      1      1\r\n   *  DEFAULT     -1     -1     0      1\r\n   *  NO          -1     -1     -1     0\r\n   *  @param {MatchingResult} other\r\n   *  @return {number}\r\n   */\r\n  compare(other) {\r\n    if (other.type === this.type) {\r\n      if (this.isSubset()) {\r\n        if (this.count === other.count) {\r\n          return this.countUnspecific - other.countUnspecific;\r\n        } else {\r\n          return this.count - other.count;\r\n        }\r\n      } else {\r\n        return 0;\r\n      }\r\n    } else {\r\n      if (this.isStrict()) return 1;\r\n      if (other.isStrict()) return -1;\r\n      if (this.isNo()) return -1;\r\n      if (other.isNo()) return 1;\r\n      if (this.isSubset() && other.isDefault()) return 1;\r\n      if (this.isDefault() && other.isSubset()) return -1;\r\n    }\r\n  }\r\n\r\n  /**\r\n   *  Just develop tool\r\n   */\r\n  print() {\r\n    let toPrint = 'MatchingResult type: ' + this.type;\r\n    if (this.count !== null) {\r\n      toPrint += ', counts: ' + this.count;\r\n    }\r\n    if (this.countUnspecific !== null) {\r\n      toPrint += ', countUnspecific: ' + this.countUnspecific;\r\n    }\r\n    console.log(toPrint.bgBlue.white);\r\n  }\r\n}\r\n\r\nexport const MATCH_NO = new MatchingResult(MATCH_TYPE.NO);\r\nexport const MATCH_STRICT = new MatchingResult(MATCH_TYPE.STRICT);\r\nexport const MATCH_DEFAULT = new MatchingResult(MATCH_TYPE.DEFAULT);\r\n\r\nexport default MatchingResult;\r\n"],"file":"MatchingResult.js"}
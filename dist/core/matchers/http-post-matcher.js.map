{"version":3,"sources":["../../../lib/core/matchers/http-post-matcher.js"],"names":["matchRecordPost","req","bundle","matches","sort","a","b","result","compare","requestBody","body","searchedRecord","searchedRecordDefault","searchedRecordRegex","forEach","record","type","value","re","RegExp","str","JSON","stringify","match","isMatched","matchType","recordBodyValue","parse","Object","keys","key","isRequestBodyEmpty"],"mappings":"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","sourcesContent":["import { getMatchesByQueryString } from './query-string-matcher';\r\n\r\n/**\r\n * TODO refaktor jako v getu do MatchItem\r\n */\r\nexport const matchRecordPost = (req, bundle) => {\r\n  let matches = getMatchesByQueryString(req, bundle);\r\n  matches.sort((a, b) => {\r\n    return b.result.compare(a.result);\r\n  });\r\n\r\n  let requestBody = req.body;\r\n\r\n  // console.log('***********');\r\n  // console.log(requestBody);\r\n  // console.log('=========== matches count: '+matches.length);\r\n  // myLog(matches);\r\n  // console.log('..................');\r\n\r\n  let searchedRecord = null;\r\n  let searchedRecordDefault = null;\r\n  let searchedRecordRegex = null;\r\n  matches.forEach(({ record }) => {\r\n    let { body } = record;\r\n    if (!!body) {\r\n      if (!!body.type && !!body.value) {\r\n        switch (body.type) {\r\n          case 'REGEX': {\r\n            let value = body.value;\r\n\r\n            var re = new RegExp(value, 'g');\r\n            var str = JSON.stringify(requestBody);\r\n            var result = str.match(re);\r\n            // console.log('+++++++++++++');\r\n            // console.log(str);\r\n            // console.log(value);\r\n            // console.log(result);\r\n\r\n            let isMatched = !!result;\r\n            if (isMatched && !searchedRecordRegex) {\r\n              searchedRecordRegex = record;\r\n            }\r\n            // console.log('REGEX '+!!result);\r\n            break;\r\n          }\r\n          case 'JSON': {\r\n            // match only filled\r\n            if (body.matchType && body.matchType === 'ONLY_MATCHING_FIELDS') {\r\n              let recordBodyValue = JSON.parse(body.value);\r\n\r\n              // let requestBodyKeysLength = Object.keys(requestBody).length;\r\n              // let recordBodyKeysLength = Object.keys(recordBodyValue).length;\r\n              // if(requestBodyKeysLength === recordBodyKeysLength){\r\n              let isMatched = true;\r\n              Object.keys(recordBodyValue).forEach((key) => {\r\n                let value = recordBodyValue[key];\r\n                if (\r\n                  JSON.stringify(value) !== JSON.stringify(requestBody[key])\r\n                ) {\r\n                  isMatched = false;\r\n                }\r\n              });\r\n              if (isMatched && !searchedRecord) {\r\n                searchedRecord = record;\r\n              }\r\n              // console.log('TEST FOR MATCH = '+isMatched);\r\n              // }else{\r\n              // console.log('NO MATCH');\r\n              // }\r\n              break; // break only if type is ONLY_MATCHING_FIELDS\r\n            }\r\n          }\r\n          case 'STRING':\r\n          default: {\r\n            // exact match\r\n            // console.log('******');\r\n            // console.log(body.value);\r\n            // console.log('------------');\r\n            // console.log(JSON.stringify(requestBody));\r\n            // console.log('=============');\r\n            // console.log(body.value === JSON.stringify(requestBody));\r\n\r\n            let isMatched = body.value === JSON.stringify(requestBody);\r\n            if (isMatched && !searchedRecord) {\r\n              searchedRecord = record;\r\n            }\r\n            // console.log('EXACT DEFAULT '+isMatched);\r\n          }\r\n        }\r\n      } else {\r\n        let isMatched = body === JSON.stringify(requestBody);\r\n        if (isMatched && !searchedRecord) {\r\n          searchedRecord = record;\r\n        }\r\n        // console.log('EXACT');\r\n        // exact match\r\n      }\r\n    } else {\r\n      let isRequestBodyEmpty =\r\n        !requestBody || JSON.stringify(requestBody) === '{}';\r\n      // console.log('ELSE');\r\n      // console.log('isRequestBodyEmpty '+isRequestBodyEmpty);\r\n      // console.log(requestBody);\r\n      if (isRequestBodyEmpty && !searchedRecord) {\r\n        searchedRecord = record;\r\n      } else if (!searchedRecordDefault) {\r\n        searchedRecordDefault = record;\r\n      }\r\n    }\r\n\r\n    // myLog(record);\r\n  });\r\n\r\n  if (!searchedRecord) {\r\n    searchedRecord = searchedRecordRegex;\r\n  }\r\n  if (!searchedRecord) {\r\n    searchedRecord = searchedRecordDefault;\r\n  }\r\n\r\n  // console.log('POST RESULT'.yellow);\r\n  // console.log(JSON.stringify(searchedRecord, null, \"  \"));\r\n  return searchedRecord;\r\n};\r\n"],"file":"http-post-matcher.js"}
{"version":3,"sources":["../lib/app.js"],"names":["isLogEnabled","config","App","constructor","sources","serverConfig","parser","SourcesParser","apiUrl","getApiUrl","app","console","log","yellow","initMiddleware","initControlApi","initRecordingApi","initMocks","corsOptions","origin","credentials","use","bodyParser","text","json","initLogger","router","SourcesRouter","registerSources","initWebSocketApi","wsServer","controlApiUrl","start","port","callback","listen"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;AACA;;;;AAEA,MAAM;AAAEA,EAAAA;AAAF,IAAmBC,eAAzB;;AAEO,MAAMC,GAAN,CAAU;AACfC,EAAAA,WAAW,CAACC,OAAD,EAAUC,YAAV,EAAwB;AACjC,SAAKC,MAAL,GAAc,IAAIC,4BAAJ,CAAkBH,OAAlB,CAAd;AACA,SAAKI,MAAL,GAAc,KAAKC,SAAL,CAAeJ,YAAf,CAAd;AACA,SAAKK,GAAL,GAAW,uBAAX;AAEAC,IAAAA,OAAO,CAACC,GAAR,CAAY,4BAA4BC,MAAxC;AAEA,SAAKC,cAAL;AACA,SAAKC,cAAL;AACA,SAAKC,gBAAL;AACA,SAAKC,SAAL;AACD;;AAEDH,EAAAA,cAAc,GAAG;AAEf,UAAMI,WAAW,GAAG;AAClBC,MAAAA,MAAM,EAAE,8BADU;AAElBC,MAAAA,WAAW,EAAE;AAFK,KAApB;AAIAV,IAAAA,GAAG,CAACW,GAAJ,CAAQ,mBAAKH,WAAL,CAAR;AAEA,SAAKR,GAAL,CAASW,GAAT,CAAaC,oBAAWC,IAAX,EAAb;AACA,SAAKb,GAAL,CAASW,GAAT,CAAaC,oBAAWE,IAAX,EAAb;AACA,SAAKd,GAAL,CAASW,GAAT,CAAa,8BAAY,KAAKb,MAAjB,CAAb;AACA,SAAKiB,UAAL;AACD;;AAEDR,EAAAA,SAAS,GAAG;AACV,UAAMS,MAAM,GAAG,IAAIC,4BAAJ,CAAkB,KAAKrB,MAAvB,CAAf;AACAoB,IAAAA,MAAM,CAACE,eAAP,CAAuB,KAAKlB,GAA5B,EAAiCV,YAAjC;AACD;AAED;AACF;AACA;AACA;AACA;AACA;AACA;;;AACEyB,EAAAA,UAAU,GAAG;AACX,QAAIzB,YAAJ,EAAkB;AAChB,WAAKU,GAAL,CAASW,GAAT,CAAa,qBAAO,wCAAP,CAAb;AACD;AACF;;AAEDN,EAAAA,cAAc,GAAG;AACf,SAAKL,GAAL,CAASW,GAAT,CAAa,KAAKb,MAAlB,EAA0B,yBAAW,KAAKF,MAAhB,CAA1B;AACD;;AAEDU,EAAAA,gBAAgB,GAAG;AACjB,SAAKN,GAAL,CAASW,GAAT,CAAa,KAAKb,MAAlB,EAA0B,8BAA1B;AACD;;AAEDqB,EAAAA,gBAAgB,CAACC,QAAD,EAAW;AACzB,SAAKpB,GAAL,CAASW,GAAT,CAAa,KAAKb,MAAlB,EAA0B,6BAAasB,QAAb,CAA1B;AACD;;AAEDrB,EAAAA,SAAS,CAAC;AAAEsB,IAAAA;AAAF,MAAoB,EAArB,EAAyB;AAChC,WAAOA,aAAa,GAAGA,aAAH,GAAmB,SAAvC;AACD;;AAEDC,EAAAA,KAAK,CAACC,IAAD,EAAOC,QAAP,EAAiB;AACpB,WAAO,KAAKxB,GAAL,CAASyB,MAAT,CAAgBF,IAAhB,EAAsBC,QAAtB,CAAP;AACD;;AAhEc","sourcesContent":["import express from 'express';\r\nimport morgan from 'morgan';\r\nimport bodyParser from 'body-parser';\r\nimport config from './config';\r\nimport { controlApi } from './api/control';\r\nimport { SourcesParser } from './core/sources-parser';\r\nimport { SourcesRouter } from './core/sources-router';\r\nimport { recordingApi } from './api/recording';\r\nimport { apiRecorder } from './api/recording/api-recorder';\r\nimport { websocketApi } from './api/websocket';\r\nimport cors from 'cors';\r\n\r\nconst { isLogEnabled } = config;\r\n\r\nexport class App {\r\n  constructor(sources, serverConfig) {\r\n    this.parser = new SourcesParser(sources);\r\n    this.apiUrl = this.getApiUrl(serverConfig);\r\n    this.app = express();\r\n\r\n    console.log('******* CONFIG **********'.yellow);\r\n\r\n    this.initMiddleware();\r\n    this.initControlApi();\r\n    this.initRecordingApi();\r\n    this.initMocks();\r\n  }\r\n\r\n  initMiddleware() {\r\n\r\n    const corsOptions = {\r\n      origin: 'http://cashloan-mock.hu:8080',  \r\n      credentials: true\r\n    }\r\n    app.use(cors(corsOptions));\r\n\r\n    this.app.use(bodyParser.text());\r\n    this.app.use(bodyParser.json());\r\n    this.app.use(apiRecorder(this.apiUrl));\r\n    this.initLogger();\r\n  }\r\n\r\n  initMocks() {\r\n    const router = new SourcesRouter(this.parser);\r\n    router.registerSources(this.app, isLogEnabled);\r\n  }\r\n\r\n  /**\r\n   *  Method to start logger of requests\r\n   *    Actual format\r\n   *      0.230 ms GET 200 /some/url/\r\n   *    More option\r\n   *      https://github.com/expressjs/morgan\r\n   */\r\n  initLogger() {\r\n    if (isLogEnabled) {\r\n      this.app.use(morgan(':response-time ms :method :status :url'));\r\n    }\r\n  }\r\n\r\n  initControlApi() {\r\n    this.app.use(this.apiUrl, controlApi(this.parser));\r\n  }\r\n\r\n  initRecordingApi() {\r\n    this.app.use(this.apiUrl, recordingApi());\r\n  }\r\n\r\n  initWebSocketApi(wsServer) {\r\n    this.app.use(this.apiUrl, websocketApi(wsServer));\r\n  }\r\n\r\n  getApiUrl({ controlApiUrl } = {}) {\r\n    return controlApiUrl ? controlApiUrl : '/api/v1';\r\n  }\r\n\r\n  start(port, callback) {\r\n    return this.app.listen(port, callback);\r\n  }\r\n}\r\n"],"file":"app.js"}